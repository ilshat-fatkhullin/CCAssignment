#include <stdio.h>
#include <pthread.h> /* POSIX Threads Library */

/* Synchronization Mutex */
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

/* Global Variable, shared between threads */
int global;

/* Simple thread Body */
void *thread_body(void *data)
{
	int i = 0, j = 0;
	int my_data = *((int *)data);

	for(j = 0; j < my_data; j++)
	{
		/* Locking mutex */
		if((i = pthread_mutex_lock(&mutex)) != 0)
		{
			printf("pthread_mutex_lock() error\n");
			exit(-1);
		}

		/* Here we have exclusive access to "global" variable */
		global = my_data;
		printf("Child thread setting global variable to passed value. Value: %d. Global Variable: %d\n", my_data, global);

		/* Unlocking mutex */
		if((i = pthread_mutex_unlock(&mutex)) != 0)
		{
			printf("pthread_mutex_unlock() error\n");
			exit(-1);
		}
	}

	/* Exiting with return value */
	pthread_exit((void *)&i);
}

int main(void)
{
	pthread_t t; /* Thread handler */
	int i, j;
	int data = 10;
	int *ret;

	/* New thread */
	if((i = pthread_create(&t, NULL, thread_body, (void *)&data)) != 0)
	{
		printf("pthread_create() error\n");
		exit(-1);
	}

	/* Giving our thread some time ... */
	for(j = 0; j < data; j++)
	{
		/* Locking mutex */
		if((i = pthread_mutex_lock(&mutex)) != 0)
		{
			printf("pthread_mutex_lock() error\n");
			exit(-1);
		}

		/* Here we have exclusive access to "global" variable */
		global = j * data;
		printf("Main thread setting global variable to passed value. Global Variable: %d\n", global);

		/* Unlocking mutex */
		if((i = pthread_mutex_unlock(&mutex)) != 0)
		{
			printf("pthread_mutex_unlock() error\n");
			exit(-1);
		}
	}

	/* "Joining" our already exited thread */
	if((i = pthread_join(t, (void *)&ret)) != 0)
	{
		printf("pthread_join() error\n");
		exit(-1);
	}

	/* Destroying the mutex */
	if((i = pthread_mutex_destroy(&mutex)) != 0)
	{
		printf("pthread_mutex_destroy() error\n");
		exit(-1);
	}

	return 0;
}